shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
data <- read.scv("Life-Expectancy-Data.csv")
data <- read.csv("Life-Expectancy-Data.csv")
data.head()
head(data)
dim(data)
str(data)
dim(data)
data <- na.omit(data)
dim(data)
head(data)
data <- data[, -c('Country', 'Year')]
data
data <- data[, -c('Country', 'Year')]
#data <- data[, -c('Country', 'Year')]
head(data)
data <- data[, -c('Country')]
data <- data[, -c(Country, Year)]
data <- data[, -c("Country", "Year")]
data <- data[, -c(1,2)]
head(data)
data
cor(data)
cor(data[,2:])
cor(data[,-1])
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
corrplot(cor(data[,-1]), methos = 'number')
corrplot(cor(data[,-1]), methos = 'color')
corrplot(cor(data[,-1]), methos = 'color', diag = FALSE)
corrplot(cor(data[,-1]), method = 'color', diag = FALSE)
corrplot(cor(data[,-1]), method = 'square', diag = FALSE)
corrplot(cor(data[,-1]),method = 'square', order = 'FPC', type = 'lower', diag = FALSE)
corrplot(cor(data[,-1]),method = 'color', order = 'FPC', type = 'lower', diag = FALSE)
corrplot(cor(data[,-1]),method = 'color'
corrplot(cor(data[,-1]),method = 'color')
corrplot(cor(data[,-1]), method = 'number')
corrplot(cor(data[,-1]), method = 'color')
model <- lm(data$Life.expectancy ~ ., data = data)
model
model$coefficients
summary(model)
pairs(data, main = "Scatter Plot Matrix")
pairs(data[:-1], main = "Scatter Plot Matrix")
pairs(data[:,-1], main = "Scatter Plot Matrix")
pairs(data[:,-1], main = "Scatter Plot Matrix")
install.packages("ellipse")
la_coefs <- coef(model)
points(la_coefs[2], la_coefs[3])
library(ellipse)
plot(ellipse(fit_la, which = -1), type = "l")
library(ellipse)
plot(ellipse(model, which = -1), type = "l")
la_coefs <- coef(model)
#points(la_coefs[2], la_coefs[3])
library(ellipse)
plot(ellipse(model, which = -1), type = "l")
la_coefs <- coef(model)
points(la_coefs[2], la_coefs[3])
points(la_coefs[2], la_coefs[5])
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
data <- read.csv("Life-Expectancy-Data.csv")
head(data)
dim(data)
str(data)
data <- na.omit(data)
dim(data)
data <- data[, -c(2,1)]
head(data)
cor(data[,-1])
corrplot(cor(data[,-1]), method = 'color')
set.seed(213)
train_indices <- sample(nrow(data), nrow(data) * 0.8)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
model <- lm(data$Life.expectancy ~ ., data = train_data)
model <- lm(train_data$Life.expectancy ~ ., data = train_data)
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
data <- read.csv("Life-Expectancy-Data.csv")
head(data)
dim(data)
str(data)
data <- na.omit(data)
dim(data)
data <- data[, -c(2,1)]
head(data)
cor(data[,-1])
corrplot(cor(data[,-1]), method = 'color')
set.seed(213)
train_indices <- sample(nrow(data), nrow(data) * 0.8)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
model <- lm(train_data$Life.expectancy ~ ., data = train_data)
#model
#model$coefficients
summary(model)
# Calculate the median of life expectancy
threshold <- mean(data$Life.expectancy)
# Create a new binary variable based on the median threshold
data$Life.expectancy.binary <- ifelse(data$Life.expectancy > threshold, 1, 0)
# split hte data into training and testing
set.seed(213)
train_indices <- sample(nrow(data), nrow(data) * 0.8)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
# Creating the logistic regression model
logistic_model <- glm(Life.expectancy.binary ~ . -Life.expectancy, data = train_data, family = binomial)
# summary of the model
summary(logistic_model)
# Make predictions on the test set
probabilites <- predict(logistic_model, newdata = test_data, type = "response")
predictions <- ifelse(probabilites > 0.5, 1, 0)
# Create a confusion matrix
conf_matrix <- table(Actual = test_data$Life.expectancy.binary, Predicted = predictions)
# Print the confusion matrix
print(conf_matrix)
# Calculate accuracy
accuracy <- sum(predictions == test_data$Life.expectancy.binary) / length(predictions)
# Calculate precision
precision <- conf_matrix[2, 2] / sum(conf_matrix[, 2])
# Calculate recall
recall <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
# Calculate F1-score
f1_score <- 2 * precision * recall / (precision + recall)
cat("Accuracy:", accuracy, "\n")
cat("Precision:", precision, "\n")
cat("Recall:", recall, "\n")
cat("F1-Score:", f1_score, "\n")
# Creating the logistic regression model
logistic_model_2 <- glm(Life.expectancy.binary ~ Adult.Mortality + infant.deaths + percentage.expenditure +
under.five.deaths + Total.expenditure + HIV.AIDS +
thinness..1.19.years + Income.composition.of.resources + Schooling,
data = train_data, family = binomial)
# summary of the model
summary(logistic_model_2)
# Make predictions on the test set
probabilites <- predict(logistic_model_2, newdata = test_data, type = "response")
predictions <- ifelse(probabilites > 0.5, 1, 0)
# Create a confusion matrix
conf_matrix <- table(Actual = test_data$Life.expectancy.binary, Predicted = predictions)
# Print the confusion matrix
print(conf_matrix)
# Calculate accuracy
accuracy <- sum(predictions == test_data$Life.expectancy.binary) / length(predictions)
# Calculate precision
precision <- conf_matrix[2, 2] / sum(conf_matrix[, 2])
# Calculate recall
recall <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
# Calculate F1-score
f1_score <- 2 * precision * recall / (precision + recall)
cat("Accuracy:", accuracy, "\n")
cat("Precision:", precision, "\n")
cat("Recall:", recall, "\n")
cat("F1-Score:", f1_score, "\n")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
data <- read.csv("Life-Expectancy-Data.csv")
head(data)
dim(data)
str(data)
data <- na.omit(data)
dim(data)
data <- data[, -c(2,1)]
head(data)
cor(data[,-1])
set.seed(213)
train_indices <- sample(nrow(data), nrow(data) * 0.8)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
model <- lm(train_data$Life.expectancy ~ ., data = train_data)
summary(model)
predictions <- predict(model, newdata = test_data)
# Ewaluacja modelu
#mse
mse <- mean((predictions - test_data$Life.expectancy)^2)
#mae
mae <- mean(abs(predictions - test_data$Life.expectancy))
#R^2
ss_residual <- sum((test_data$Life.expectancy - predictions)^2)
ss_total <- sum((test_data$Life.expectancy - mean(test_data$Life.expectancy))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Wyświetlanie wyników
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("R-squared:", r_squared, "\n")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
model2 <- lm(train_data$Life.expectancy ~ Adult.Mortality + infant.deaths + Alcohol + percentage.expenditure +
BMI + under.five.deaths + Total.expenditure + Diphtheria + HIV.AIDS + Income.composition.of.resources + Schooling,data = train_data)
summary(model2)
predictions2 <- predict(model2, newdata = test_data)
# Ewaluacja modelu
#mse
mse <- mean((predictions2 - test_data$Life.expectancy)^2)
#mae
mae <- mean(abs(predictions2 - test_data$Life.expectancy))
#R^2
ss_residual <- sum((test_data$Life.expectancy - predictions2)^2)
ss_total <- sum((test_data$Life.expectancy - mean(test_data$Life.expectancy))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Wyświetlanie wyników
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("R-squared:", r_squared, "\n")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
describe(data)
summary(data)
data <- scale(data)
data <- as.data.frame(scale(data))
type(df)
class(df)
class(data)
data <- as.data.frame(scale(data[,-1]))
corrplot(cor(data[,-1]), method = 'color')
