fit_ridge <- glmnet(X[train,], y[train], alpha = 0, lambda = lambda_grid,
thresh = 1e-12)
pred_ridge <- predict(fit_ridge, s = 4, newx = X[test,])
mean((pred_ridge - y[test])^2)
set.seed(1)
cv_out <- cv.glmnet(X[train,], y[train], alpha = 0)
plot(cv_out)
cv_out$lambda.min
fit_ridge_full <- glmnet(X, y, alpha = 0)
predict(fit_ridge_full, s = cv_out$lambda.min, type = "coefficients")
data <- data[, -ncol(data)]
X <- model.matrix(Life.expectancy ~ ., data = data)[, -1]
y <- data$Life.expectancy
lambda_grid <- 10^seq(10, -2, length.out = 100)
fit_ridge <- glmnet(X, y, alpha = 0, lambda = lambda_grid)
dim(coef(fit_ridge))
fit_ridge$lambda[50]
coef_ridge <- coef(fit_ridge)[, 50]
sqrt(sum(coef_ridge[-1]^2))
fit_ridge$lambda[70]
coef(fit_ridge)[, 70]
sqrt(sum(coef(fit_ridge)[-1, 70]^2))
set.seed(1)
n <- nrow(X)
train <- sample(n, n / 2)
test <- -train
fit_ridge <- glmnet(X[train,], y[train], alpha = 0, lambda = lambda_grid,
thresh = 1e-12)
pred_ridge <- predict(fit_ridge, s = 4, newx = X[test,])
mean((pred_ridge - y[test])^2)
pred_null <- mean(y[train])
mean((pred_null - y[test])^2)
pred_ridge_big <- predict(fit_ridge, s = 1e10, newx = X[test,])
mean((pred_ridge_big - y[test])^2)
pred_ridge_0 <- predict(fit_ridge, x = X[train,], y = y[train], s = 0,
newx = X[test,], exact = TRUE)
mean((pred_ridge_0 - y[test])^2)
set.seed(1)
cv_out <- cv.glmnet(X[train,], y[train], alpha = 0)
plot(cv_out)
cv_out$lambda.min
pred_ridge_opt <- predict(fit_ridge, s = cv_out$lambda.min, newx = X[test,])
#cv_out$lambda.min, which represents the value of lambda that minimizes the mean cross-validated erro
mean((pred_ridge_opt - y[test])^2)
fit_ridge_full <- glmnet(X, y, alpha = 0)
predict(fit_ridge_full, s = cv_out$lambda.min, type = "coefficients")
cv_out <- cv.glmnet(X[train,], y[train], alpha = 1)
plot(cv_out)
cv_out$lambda.min
pred_lasso <- predict(fit_lasso, s = cv_out$lambda.min, newx = X[test,])
fit_lasso <- glmnet(X[train,], y[train], alpha = 1)
plot(fit_lasso, xvar = "lambda")
cv_out <- cv.glmnet(X[train,], y[train], alpha = 1)
plot(cv_out)
cv_out$lambda.min
pred_lasso <- predict(fit_lasso, s = cv_out$lambda.min, newx = X[test,])
mean((pred_lasso - y[test])^2)
fit_lasso_full <- glmnet(X, y, alpha = 1)
predict(fit_lasso_full, s = cv_out$lambda.min, type = "coefficients")[1:20,]
fit_lasso_full <- glmnet(X, y, alpha = 1)
predict(fit_lasso_full, s = cv_out$lambda.min, type = "coefficients")[1:19,]
fit_lasso_full <- glmnet(X, y, alpha = 1)
predict(fit_lasso_full, s = cv_out$lambda.min, type = "coefficients")
columns(data)
colnames(data)
install.packages("mgcv")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
library(leaps)
library(glmnet)
library(mgcv)
gam_model <- gam(Life.expectancy ~ s(Adult.Mortality) + s(infant.deaths) + s(Alcohol) +
s(percentage.expenditure) + s(Hepatitis.B) + s(Measles) + s(BMI) +
s(under.five.deaths) + s(Polio) + s(Total.expenditure) + s(Diphtheria) +
s(HIV.AIDS) + s(GDP) + s(Population) + s(thinness..1.19.years) +
s(thinness.5.9.years) + s(Income.composition.of.resources) + s(Schooling),
data = data)
gam_model <- gam(Life.expectancy ~ . + s(Adult.Mortality, k = seq(1, 10, by = 1)) +
s(infant.deaths, k = seq(1, 10, by = 1)) +
s(Alcohol, k = seq(1, 10, by = 1)) +
s(percentage.expenditure, k = seq(1, 10, by = 1)) +
s(Hepatitis.B, k = seq(1, 10, by = 1)) +
s(Measles, k = seq(1, 10, by = 1)) +
s(BMI, k = seq(1, 10, by = 1)) +
s(under.five.deaths, k = seq(1, 10, by = 1)) +
s(Polio, k = seq(1, 10, by = 1)) +
s(Total.expenditure, k = seq(1, 10, by = 1)) +
s(Diphtheria, k = seq(1, 10, by = 1)) +
s(HIV.AIDS, k = seq(1, 10, by = 1)) +
s(GDP, k = seq(1, 10, by = 1)) +
s(Population, k = seq(1, 10, by = 1)) +
s(thinness..1.19.years, k = seq(1, 10, by = 1)) +
s(thinness.5.9.years, k = seq(1, 10, by = 1)) +
s(Income.composition.of.resources, k = seq(1, 10, by = 1)) +
s(Schooling, k = seq(1, 10, by = 1)),
data = data)
gam_model <- gam(Life.expectancy ~ . + ns(Adult.Mortality, k = seq(1, 10, by = 1)) +
ns(infant.deaths, k = seq(1, 10, by = 1)) +
ns(Alcohol, k = seq(1, 10, by = 1)) +
ns(percentage.expenditure, k = seq(1, 10, by = 1)) +
ns(Hepatitis.B, k = seq(1, 10, by = 1)) +
ns(Measles, k = seq(1, 10, by = 1)) +
ns(BMI, k = seq(1, 10, by = 1)) +
ns(under.five.deaths, k = seq(1, 10, by = 1)) +
ns(Polio, k = seq(1, 10, by = 1)) +
ns(Total.expenditure, k = seq(1, 10, by = 1)) +
ns(Diphtheria, k = seq(1, 10, by = 1)) +
ns(HIV.AIDS, k = seq(1, 10, by = 1)) +
ns(GDP, k = seq(1, 10, by = 1)) +
ns(Population, k = seq(1, 10, by = 1)) +
ns(thinness..1.19.years, k = seq(1, 10, by = 1)) +
ns(thinness.5.9.years, k = seq(1, 10, by = 1)) +
ns(Income.composition.of.resources, k = seq(1, 10, by = 1)) +
ns(Schooling, k = seq(1, 10, by = 1)),
data = data)
gam_model <- gam(Life.expectancy ~ s(Adult.Mortality) + s(infant.deaths) + s(Alcohol) +
s(percentage.expenditure) + s(Hepatitis.B) + s(Measles) + s(BMI) +
s(under.five.deaths) + s(Polio) + s(Total.expenditure) + s(Diphtheria) +
s(HIV.AIDS) + s(GDP) + s(Population) + s(thinness..1.19.years) +
s(thinness.5.9.years) + s(Income.composition.of.resources) + s(Schooling),
data = data)
summary(gam_model)
par(mfrow = c(1, 3))
plot(gam_model, col = "red", se = TRUE)
par(mfrow = c(6, 3))
plot(gam_model, col = "red", se = TRUE)
par(mfrow = c(1, 3))
plot(gam_model, col = "red", se = TRUE)
par(mfrow = c(3, 6))
plot(gam_model, col = "red", se = TRUE)
par(mfrow = c(1, 3))
plot(gam_model, col = "red", se = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
library(leaps)
library(glmnet)
library(mgcv)
regresion_tree <- tree(Life.expectancy ~ ., data= data)
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
library(leaps)
library(glmnet)
library(mgcv)
library(tree)
%>% install.packages('tree')
install.packages("tree")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
library(leaps)
library(glmnet)
library(mgcv)
library(tree)
regresion_tree <- tree(Life.expectancy ~ ., data= data)
tree
data
data <- data[, -ncol(data)]
data
regression_tree <- tree(Life.expectancy ~ ., data= data)
summary(regression_tree)
plot(regression_tree)
text(regression_tree)
plot(regression_tree)
text(regression_tree)
set.seed(1)
n <- nrow(data)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data, subset = train)
life_expectancy_pred <- predict(regression_tree, newdata = data[test,])
mean((life_expectancy_pred - data$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b")
medv_pruned <- prune.tree(regression_tree, best = 4)
plot(medv_pruned)
text(medv_pruned)
regression_tree
plot(regression_tree)
text(regression_tree, cex = 0.8, adj = c(0, 0.5), pos = 2)
plot(regression_tree)
text(regression_tree, cex = 0.8, adj = c(0, 0.7), pos = 2)
plot(regression_tree)
text(regression_tree, cex = 1, adj = c(0, 0.5), pos = 2)
plot(regression_tree)
text(regression_tree, cex = 0.7, adj = c(0, 0.5), pos = 2)
plot(regression_tree)
text(regression_tree, cex = 0.7, adj = c(0, 0.8), pos = 2)
plot(regression_tree)
text(regression_tree, cex = 0.7, adj = c(0, 0.8), pos = 3)
plot(regression_tree)
text(regression_tree, cex = 0.7, adj = c(0, 0.8), pos = 2)
plot(regression_tree)
text(regression_tree, cex = 0.6, adj = c(0, 0.8), pos = 2)
plot(regression_tree)
text(regression_tree, cex = 0.6, adj = c(0, 0.5), pos = 2)
plot(regression_tree)
text(regression_tree, cex = 0.6, adj = c(0, 0.5), pos = 3)
plot(regression_tree)
text(regression_tree, cex = 0.6, adj = c(0, 0.5), pos = 3)
plot(regression_tree)
text(regression_tree, cex = 0.7, adj = c(0, 0.5), pos = 3)
regression_tree <- tree(Life.expectancy ~ ., data= data)
summary(regression_tree)
set.seed(1)
n <- nrow(data)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data, subset = train)
life_expectancy_pred <- predict(regression_tree, newdata = data[test,])
mean((life_expectancy_pred - data$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b")
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
set.seed(1)
n <- nrow(Boston)
install.packages("MASS")  # Only required if not already installed
library(MASS)
install.packages("MASS")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(caret)
library(leaps)
library(glmnet)
library(mgcv)
library(tree)
Boston <- data(Boston)
set.seed(1)
n <- nrow(Boston)
train <- sample(n, n / 2)
Boston <- data(Boston)
set.seed(1)
n <- nrow(Boston)
print(n)
train <- sample(n, n / 2)
print(data(Boston))
set.seed(1)
n <- nrow(Boston)
print(n)
train <- sample(n, n / 2)
Boston
set.seed(1)
n <- nrow(Boston)
print(n)
train <- sample(n, n / 2)
library(MASS
library(MASS)
library(MASS)
Boston
set.seed(1)
n <- nrow(Boston)
print(n)
train <- sample(n, n / 2)
View(data)
regression_tree <- tree(Life.expectancy ~ ., data= data)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
medv_tree <- tree(medv ~ ., data = Boston)
data(Boston)
View(Boston)
set.seed(1)
n <- nrow(Boston)
print(n)
train <- sample(n, n / 2)
test <- -train
medv_tree <- tree(medv ~ ., data = Boston, subset = train)
medv_pred <- predict(medv_tree, newdata = Boston[test,])
mean((medv_pred - Boston$medv[test])^2)
medv_cv <- cv.tree(medv_tree)
plot(medv_cv$size, medv_cv$dev, type = "b")
set.seed(1)
n <- nrow(data)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data, subset = train)
life_expectancy_pred <- predict(regression_tree, newdata = data[test,])
mean((life_expectancy_pred - data$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
tree_pruned <- prune.tree(regression_tree, best = t)
tree_pruned <- prune.tree(regression_tree, best = 5)
plot(tree_pruned)
text(tree_pruned)
data <- read.csv("Life-Expectancy-Data.csv")
head(data)
dim(data)
str(data)
names(data)
data <- na.omit(data)
dim(data)
data <- data[, -c(2,1)]
head(data)
summary(data)
data <- as.data.frame(scale(data[,-1]))
cor(data[,-1])
corrplot(cor(data[,-1]), method = 'color')
View(data)
data <- read.csv("Life-Expectancy-Data.csv")
head(data)
dim(data)
str(data)
View(data)
names(data)
data <- na.omit(data)
dim(data)
data <- data[, -c(2,1)]
head(data)
summary(data)
data_not_scaled <- data
data <- as.data.frame(scale(data[,-1]))
cor(data[,-1])
View(data_not_scaled)
regression_tree <- tree(Life.expectancy ~ ., data= data_not_scaled)
summary(regression_tree)
data <- read.csv("Life-Expectancy-Data.csv")
head(data)
dim(data)
str(data)
names(data)
data <- na.omit(data)
dim(data)
data <- data[, -c(2,1)]
head(data)
data_not_scaled <- data
data <- as.data.frame(scale(data[,-1]))
cor(data[,-1])
View(data_not_scaled)
regression_tree <- tree(Life.expectancy ~ ., data= data_not_scaled)
summary(regression_tree)
plot(regression_tree)
text(regression_tree, cex = 0.7, adj = c(0, 0.5), pos = 3)
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
mean((life_expectancy_pred - data$Life.expectancy[test])^2)
mean((life_expectancy_pred - data_not_scaled$Life.expectancy[test])^2)
data_not_scaled <- data
data_not_scaled$Status <- as.factor(data_not_scaled$Status)
data <- read.csv("Life-Expectancy-Data.csv")
head(data)
dim(data)
str(data)
data <- na.omit(data)
dim(data)
data <- data[, -c(2,1)]
head(data)
data_not_scaled <- data
data_not_scaled$Status <- as.factor(data_not_scaled$Status)
data <- as.data.frame(scale(data[,-1]))
cor(data[,-1])
regression_tree <- tree(Life.expectancy ~ ., data= data_not_scaled)
summary(regression_tree)
plot(regression_tree)
text(regression_tree, cex = 0.7, adj = c(0, 0.5), pos = 3)
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
mean((life_expectancy_pred - data_not_scaled$Life.expectancy[test])^2)
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
mean((life_expectancy_pred - data_not_scaled$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
tree_pruned <- prune.tree(regression_tree, best = 5)
plot(tree_pruned)
text(tree_pruned)
life_expectancy_pred_pruned <- predict(tree_pruned, newdata = data_not_scaled[test,])
mean((life_expectancy_pred_pruned - data_not_scaled$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
life_expectancy_cv$size
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, cp=0.01)
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.001)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
mean((life_expectancy_pred - data_not_scaled$Life.expectancy[test])^2)
regression_tree <- tree(Life.expectancy ~ ., data= data_not_scaled, mindev = 0.001)
summary(regression_tree)
plot(regression_tree)
text(regression_tree, cex = 0.7, adj = c(0, 0.5), pos = 3)
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.001)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
mean((life_expectancy_pred - data_not_scaled$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.0001)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
mean((life_expectancy_pred - data_not_scaled$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
regression_tree <- tree(Life.expectancy ~ ., data= data_not_scaled, maxdepth = Inf)
regression_tree <- tree(Life.expectancy ~ ., data= data_not_scaled, maxdepth = 5)
regression_tree <- tree(Life.expectancy ~ ., data= data_not_scaled)
summary(regression_tree)
plot(regression_tree)
text(regression_tree, cex = 0.7, adj = c(0, 0.5), pos = 3)
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.001)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
mean((life_expectancy_pred - data_not_scaled$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
regression_tree_deeper <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.01)
life_expectancy_pred_deeper <- predict(regression_tree_deeper, newdata = data_not_scaled[test,])
mean((life_expectancy_pred_deeper - data_not_scaled$Life.expectancy[test])^2)
regression_tree_deeper <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.001)
life_expectancy_pred_deeper <- predict(regression_tree_deeper, newdata = data_not_scaled[test,])
mean((life_expectancy_pred_deeper - data_not_scaled$Life.expectancy[test])^2)
regression_tree_deeper <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.0001)
life_expectancy_pred_deeper <- predict(regression_tree_deeper, newdata = data_not_scaled[test,])
mean((life_expectancy_pred_deeper - data_not_scaled$Life.expectancy[test])^2)
regression_tree_deeper <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.00001)
life_expectancy_pred_deeper <- predict(regression_tree_deeper, newdata = data_not_scaled[test,])
mean((life_expectancy_pred_deeper - data_not_scaled$Life.expectancy[test])^2)
regression_tree_deeper <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.0001)
life_expectancy_pred_deeper <- predict(regression_tree_deeper, newdata = data_not_scaled[test,])
mean((life_expectancy_pred_deeper - data_not_scaled$Life.expectancy[test])^2)
regression_tree_deeper <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.0001)
life_expectancy_pred_deeper <- predict(regression_tree_deeper, newdata = data_not_scaled[test,])
mean((life_expectancy_pred_deeper - data_not_scaled$Life.expectancy[test])^2)
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.00001)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
mean((life_expectancy_pred - data_not_scaled$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size[10:], life_expectancy_cv$dev[10:], type = "b",
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size[10:,], life_expectancy_cv$dev[10:,], type = "b",
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size[1:10,], life_expectancy_cv$dev[1:10,], type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size[-(1:10),], life_expectancy_cv$dev[-(1:10),], type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
set.seed(1)
n <- nrow(data_not_scaled)
train <- sample(n, n / 2)
test <- -train
regression_tree <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train)
life_expectancy_pred <- predict(regression_tree, newdata = data_not_scaled[test,])
mean((life_expectancy_pred - data_not_scaled$Life.expectancy[test])^2)
life_expectancy_cv <- cv.tree(regression_tree)
plot(life_expectancy_cv$size, life_expectancy_cv$dev, type = "b",
xlab = "Tree Size", ylab = "Cross-Validated Deviance")
tree_pruned <- prune.tree(regression_tree, best = 5)
plot(tree_pruned)
text(tree_pruned)
life_expectancy_pred_pruned <- predict(tree_pruned, newdata = data_not_scaled[test,])
mean((life_expectancy_pred_pruned - data_not_scaled$Life.expectancy[test])^2)
regression_tree_deeper <- tree(Life.expectancy ~ ., data = data_not_scaled, subset = train, mindev = 0.0001)
life_expectancy_pred_deeper <- predict(regression_tree_deeper, newdata = data_not_scaled[test,])
mean((life_expectancy_pred_deeper - data_not_scaled$Life.expectancy[test])^2)
